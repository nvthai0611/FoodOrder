<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Quản Lý Đơn Hàng</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
        .container-fluid {
            padding-top: 20px;
        }
        .card {
            margin-bottom: 20px;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
        }
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        /* Cập nhật các class trạng thái để phù hợp với dropdown */
        .status-pending { color: #FFC107; font-weight: bold; }
        .status-preparing { color: #2196F3; font-weight: bold; }
        .status-done { color: #4CAF50; font-weight: bold; }
        .status-canceled { color: #F44336; font-weight: bold; }
        
        /* Màu cho trạng thái thanh toán */
        .status-payment-pending { color: #FFC107; } /* Vàng */
        .status-payment-paid { color: #28A745; }    /* Xanh lá cây */
        .status-payment-failed { color: #DC3545; }   /* Đỏ */

        .table-responsive {
            margin-top: 20px;
        }
        .pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }
        .pagination-controls button {
            margin: 0 10px;
        }
        .modal-body ul {
            list-style: none;
            padding: 0;
        }
        .modal-body ul li {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <
        <h1 class="mb-4 text-center">Dashboard Quản Lý Đơn Hàng</h1>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4>Doanh thu theo tháng (<span id="salesYear"></span>)</h4>
                    </div>
                    <div class="card-body">
                        <select id="chartYearSelect" class="form-select mb-3" onchange="fetchAndRenderCharts()">
                            <% for(let i = new Date().getFullYear(); i >= new Date().getFullYear() - 4; i--) { %>
                                <option value="<%= i %>" <%= i === new Date().getFullYear() ? 'selected' : '' %>><%= i %></option>
                            <% } %>
                        </select>
                        <div class="chart-container">
                            <canvas id="monthlySalesChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4>Phân bổ trạng thái đơn hàng</h4>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="chartStatusMonthSelect" class="form-label">Tháng:</label>
                                <select id="chartStatusMonthSelect" class="form-select" onchange="fetchAndRenderCharts()">
                                    <option value="">Tất cả</option>
                                    <% for(let i = 1; i <= 12; i++) { %>
                                        <option value="<%= i %>"><%= new Date(0, i - 1).toLocaleString('vi-VN', { month: 'long' }) %></option>
                                    <% } %>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="chartStatusYearSelect" class="form-label">Năm:</label>
                                <select id="chartStatusYearSelect" class="form-select" onchange="fetchAndRenderCharts()">
                                    <option value="">Tất cả</option>
                                    <% for(let i = new Date().getFullYear(); i >= new Date().getFullYear() - 4; i--) { %>
                                        <option value="<%= i %>" <%= i === new Date().getFullYear() ? 'selected' : '' %>><%= i %></option>
                                    <% } %>
                                </select>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="statusDistributionChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h4>Danh sách Đơn hàng</h4>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label for="monthSelect" class="form-label">Tháng:</label>
                        <select id="monthSelect" class="form-select">
                            <option value="">Tất cả</option>
                            <% for(let i = 1; i <= 12; i++) { %>
                                <option value="<%= i %>" <%= (initialMonth == i) ? 'selected' : '' %>><%= new Date(0, i - 1).toLocaleString('vi-VN', { month: 'long' }) %></option>
                            <% } %>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="yearSelect" class="form-label">Năm:</label>
                        <select id="yearSelect" class="form-select">
                            <option value="">Tất cả</option>
                            <% for(let i = new Date().getFullYear(); i >= new Date().getFullYear() - 4; i--) { %>
                                <option value="<%= i %>" <%= (initialYear == i) ? 'selected' : '' %>><%= i %></option>
                            <% } %>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="statusSelect" class="form-label">Trạng thái giao hàng:</label>
                        <select id="statusSelect" class="form-select">
                            <option value="">Tất cả</option>
                            <option value="pending" <%= (initialStatus === 'pending') ? 'selected' : '' %>>Đang chờ</option>
                            <option value="preparing" <%= (initialStatus === 'preparing') ? 'selected' : '' %>>Đang chuẩn bị</option>
                            <option value="done" <%= (initialStatus === 'done') ? 'selected' : '' %>>Hoàn thành</option>
                            <option value="canceled" <%= (initialStatus === 'canceled') ? 'selected' : '' %>>Đã hủy</option>
                        </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button class="btn btn-primary w-100" onclick="applyFilters()">Áp dụng bộ lọc</button>
                    </div>
                </div>

                <div class="input-group mb-3">
                    <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm theo ghi chú, ID đơn hàng..." value="<%= initialSearch %>">
                    <button class="btn btn-outline-secondary" type="button" id="searchButton" onclick="applyFilters()">Tìm kiếm</button>
                </div>

                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead>
                            <tr>
                                <th>ID Đơn hàng</th>
                                <th>Người dùng</th>
                                <th>Tổng tiền</th>
                                <th>Trạng thái giao hàng</th>
                                <th>Trạng thái thanh toán</th> <th>Thời gian đặt</th>
                                <th>Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="ordersTableBody">
                            <% if (orders && orders.length > 0) { %>
                                <% orders.forEach(order => { %>
                                    <tr>
                                        <td><%= order._id %></td>
                                        <td><%= order.user_id ? (order.user_id.name || order.user_id.email) : 'N/A' %></td>
                                        <td><%= order.total_price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }) %></td>
                                        <td>
                                            <select class="form-select form-select-sm order-status-select" data-order-id="<%= order._id %>" data-current-status="<%= order.status %>">
                                                <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Đang chờ</option>
                                                <option value="preparing" <%= order.status === 'preparing' ? 'selected' : '' %>>Đang chuẩn bị</option>
                                                <option value="done" <%= order.status === 'done' ? 'selected' : '' %>>Hoàn thành</option>
                                                <option value="canceled" <%= order.status === 'canceled' ? 'selected' : '' %>>Đã hủy</option>
                                            </select>
                                        </td>
                                        <td>
                                            <span class="status-payment-<%= order.status_payment %>">
                                                <%= order.status_payment === 'pending' ? 'Thanh toán khi nhận hàng' : 
                                                    order.status_payment === 'paid' ? 'Đã thanh toán' : 
                                                    'Thất bại' %>
                                            </span>
                                        </td> <td><%= new Date(order.created_at).toLocaleString('vi-VN') %></td>
                                        <td>
                                            <button class="btn btn-info btn-sm" onclick="showOrderDetail('<%= order._id %>')">Xem chi tiết</button>
                                        </td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="7" class="text-center">Không tìm thấy đơn hàng nào.</td> </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                <div class="pagination-controls">
                    <button class="btn btn-secondary btn-sm" id="prevPage" <%= currentPage === 1 ? 'disabled' : '' %>>Trước</button>
                    <span class="mx-2">Trang <span id="currentPage"><%= currentPage %></span> / <span id="totalPages"><%= totalPages %></span></span>
                    <button class="btn btn-secondary btn-sm" id="nextPage" <%= currentPage === totalPages ? 'disabled' : '' %>>Tiếp</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="orderDetailModal" tabindex="-1" aria-labelledby="orderDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="orderDetailModalLabel">Chi tiết Đơn hàng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p><strong>ID Đơn hàng:</strong> <span id="modalOrderId"></span></p>
                    <p><strong>Người dùng:</strong> <span id="modalOrderUser"></span></p>
                    <p><strong>Tổng tiền:</strong> <span id="modalOrderTotalPrice"></span></p>
                    <p><strong>Trạng thái giao hàng:</strong> <span id="modalOrderStatus"></span></p>
                    <p><strong>Trạng thái thanh toán:</strong> <span id="modalOrderPaymentStatus"></span></p> <p><strong>Ghi chú:</strong> <span id="modalOrderNote"></span></p>
                    <p><strong>Thời gian dự kiến:</strong> <span id="modalOrderScheduledTime"></span></p>
                    <p><strong>Thời gian đặt:</strong> <span id="modalOrderCreatedAt"></span></p>

                    <h6>Sản phẩm:</h6>
                    <ul id="modalOrderItems">
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <script>
        // Khởi tạo các biến JS với giá trị từ server-side rendering
        let currentPage = <%= currentPage || 1 %>;
        const limit = <%= limit || 10 %>; // Có thể giữ cố định hoặc truyền từ server
        let totalPages = <%= totalPages || 1 %>;

        let currentSearch = `<%= initialSearch || '' %>`;
        let currentMonth = `<%= initialMonth || '' %>`;
        let currentYear = `<%= initialYear || '' %>`;
        let currentStatus = `<%= initialStatus || '' %>`;

        const ordersTableBody = document.getElementById('ordersTableBody');
        const searchInput = document.getElementById('searchInput');
        const monthSelect = document.getElementById('monthSelect');
        const yearSelect = document.getElementById('yearSelect');
        const statusSelect = document.getElementById('statusSelect');
        const currentPageSpan = document.getElementById('currentPage');
        const totalPagesSpan = document.getElementById('totalPages');
        const prevPageBtn = document.getElementById('prevPage');
        const nextPageBtn = document.getElementById('nextPage');

        // Biến cho dropdown filter của chart
        const chartYearSelect = document.getElementById('chartYearSelect');
        const salesYearSpan = document.getElementById('salesYear');
        const chartStatusMonthSelect = document.getElementById('chartStatusMonthSelect'); // NEW
        const chartStatusYearSelect = document.getElementById('chartStatusYearSelect');   // NEW

        // KHAI BÁO BIẾN CHO CANVAS Ở ĐÂY
        const monthlySalesChartCanvas = document.getElementById('monthlySalesChart');
        const statusDistributionChartCanvas = document.getElementById('statusDistributionChart');

        let monthlySalesChartInstance = null;
        let statusDistributionChartInstance = null;

        // --- Fetch & Render Orders (Sử dụng AJAX cho các tương tác sau lần tải đầu) ---
        async function fetchOrders() {
            try {
                const API_BASE_URL = '/admin/orders/data'; 
                const queryParams = new URLSearchParams({
                    page: currentPage,
                    limit: limit,
                    search: currentSearch,
                    month: currentMonth,
                    year: currentYear,
                    status: currentStatus
                }).toString();

                const response = await fetch(`${API_BASE_URL}?${queryParams}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                
                renderOrdersTable(data.docs);
                updatePagination(data.page, data.totalPages);
            } catch (error) {
                console.error('Lỗi khi tải đơn hàng:', error);
                alert('Không thể tải danh sách đơn hàng. Vui lòng thử lại.');
            }
        }

        function renderOrdersTable(orders) {
            ordersTableBody.innerHTML = ''; // Xóa các hàng hiện có
            if (orders.length === 0) {
                ordersTableBody.innerHTML = '<tr><td colspan="7" class="text-center">Không tìm thấy đơn hàng nào.</td></tr>'; // Cập nhật colspan
                return;
            }

            orders.forEach(order => {
                const row = document.createElement('tr');
                // Sử dụng data-order-id và data-current-status cho dropdown
                row.innerHTML = `
                    <td>${order._id}</td>
                    <td>${order.user_id ? (order.user_id.name || order.user_id.email) : 'N/A'}</td>
                    <td>${order.total_price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                    <td>
                        <select class="form-select form-select-sm order-status-select" data-order-id="${order._id}" data-current-status="${order.status}">
                            <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Đang chờ</option>
                            <option value="preparing" ${order.status === 'preparing' ? 'selected' : ''}>Đang chuẩn bị</option>
                            <option value="done" ${order.status === 'done' ? 'selected' : ''}>Hoàn thành</option>
                            <option value="canceled" ${order.status === 'canceled' ? 'selected' : ''}>Đã hủy</option>
                        </select>
                    </td>
                    <td>
                        <span class="status-payment-${order.status_payment}">
                            ${order.status_payment === 'pending' ? 'Thanh toán khi nhận hàng' : 
                                order.status_payment === 'paid' ? 'Đã thanh toán' : 
                                'Thất bại'}
                        </span>
                    </td>
                    <td>${new Date(order.created_at).toLocaleString('vi-VN')}</td>
                    <td>
                        <button class="btn btn-info btn-sm" onclick="showOrderDetail('${order._id}')">Xem chi tiết</button>
                    </td>
                `;
                ordersTableBody.appendChild(row);
            });

            // Sau khi render bảng, thêm lại event listeners cho các dropdown trạng thái mới
            addStatusSelectEventListeners();
        }

        function updatePagination(page, totalPagesCount) {
            currentPage = page;
            totalPages = totalPagesCount;
            currentPageSpan.textContent = currentPage;
            totalPagesSpan.textContent = totalPages;
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages;
        }

        // --- Filter, Search & Pagination Handlers ---
        function applyFilters() {
            currentSearch = searchInput.value.trim();
            currentMonth = monthSelect.value;
            currentYear = yearSelect.value;
            currentStatus = statusSelect.value;
            currentPage = 1; // Reset về trang 1 khi áp dụng bộ lọc/tìm kiếm mới
            fetchOrders();
        }

        prevPageBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                fetchOrders();
            }
        });

        nextPageBtn.addEventListener('click', () => {
            if (currentPage < totalPages) {
                currentPage++;
                fetchOrders();
            }
        });

        // Trigger search on Enter key press
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });

        // --- Modal for Order Detail ---
        async function showOrderDetail(orderId) {
            try {
                const API_DETAIL_URL = '/admin/orders'; 
                const response = await fetch(`${API_DETAIL_URL}/${orderId}`);
                console.log(response);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const order = await response.json();

                document.getElementById('modalOrderId').textContent = order._id;
                document.getElementById('modalOrderUser').textContent = order.user_id ? (order.user_id.name || order.user_id.email) : 'N/A';
                document.getElementById('modalOrderTotalPrice').textContent = order.total_price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                document.getElementById('modalOrderStatus').textContent = order.status;
                
                // NEW: Hiển thị trạng thái thanh toán trong modal
                let paymentStatusText;
                switch(order.status_payment) {
                    case 'pending': paymentStatusText = 'Thanh toán khi nhận hàng'; break;
                    case 'paid': paymentStatusText = 'Đã thanh toán'; break;
                    case 'failed': paymentStatusText = 'Thất bại'; break;
                    default: paymentStatusText = order.status_payment;
                }
                document.getElementById('modalOrderPaymentStatus').textContent = paymentStatusText;


                document.getElementById('modalOrderNote').textContent = order.note || 'Không có ghi chú';
                document.getElementById('modalOrderScheduledTime').textContent = order.scheduled_time ? new Date(order.scheduled_time).toLocaleString('vi-VN') : 'Không có';
                document.getElementById('modalOrderCreatedAt').textContent = new Date(order.created_at).toLocaleString('vi-VN');

                const itemsList = document.getElementById('modalOrderItems');
                itemsList.innerHTML = '';
                order.items.forEach(item => {
                    const li = document.createElement('li');
                    li.textContent = `${item.food_id ? item.food_id.name : 'Unknown Food'} x ${item.quantity} (${item.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}/sp)`;
                    itemsList.appendChild(li);
                });

                const myModal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
                myModal.show();

            } catch (error) {
                console.error('Lỗi khi tải chi tiết đơn hàng:', error);
                alert('Không thể tải chi tiết đơn hàng. Vui lòng thử lại.');
            }
        }

        // --- Function to add event listeners to status selects ---
        function addStatusSelectEventListeners() {
            document.querySelectorAll('.order-status-select').forEach(select => {
                select.removeEventListener('change', handleStatusChange); // Remove old listener if any
                select.addEventListener('change', handleStatusChange); // Add new listener
            });
        }

        // --- Event handler for status change (DÙNG POST) ---
        async function handleStatusChange(event) {
            const selectElement = event.target;
            const orderId = selectElement.dataset.orderId;
            const newStatus = selectElement.value;
            const oldStatus = selectElement.dataset.currentStatus; // Lấy trạng thái cũ

            if (confirm(`Bạn có chắc chắn muốn thay đổi trạng thái đơn hàng ${orderId} thành "${newStatus}" không?`)) {
                try {
                    const response = await fetch(`/admin/orders/${orderId}/update-status`, { // Thay đổi URL
                        method: 'POST', // Thay đổi method thành POST
                        headers: {
                            'Content-Type': 'application/json',
                            // Có thể thêm CSRF token nếu bạn sử dụng
                        },
                        body: JSON.stringify({ newStatus: newStatus })
                    });

                    const data = await response.json();

                    if (response.ok) {
                        alert(data.message);
                        // Cập nhật lại data-current-status sau khi thành công
                        selectElement.dataset.currentStatus = newStatus;
                        // Tùy chọn: refresh bảng hoặc chỉ cập nhật class màu
                        // Lưu ý: Nếu muốn cập nhật text của span, bạn cần thêm span đó vào cell td chứa select
                        // const statusSpan = selectElement.closest('td').querySelector('.status-text-display'); 
                        // if (statusSpan) {
                        //     statusSpan.textContent = newStatus; 
                        // }
                        // Để đơn giản và đồng bộ, bạn có thể tải lại toàn bộ danh sách đơn hàng sau khi cập nhật
                         fetchOrders(); 
                    } else {
                        alert('Lỗi: ' + (data.message || 'Không thể cập nhật trạng thái.'));
                        // Quay lại trạng thái cũ nếu lỗi
                        selectElement.value = oldStatus;
                    }
                } catch (error) {
                    console.error('Lỗi khi cập nhật trạng thái:', error);
                    alert('Lỗi mạng hoặc server không phản hồi.');
                    // Quay lại trạng thái cũ nếu lỗi
                    selectElement.value = oldStatus;
                }
            } else {
                // Người dùng hủy, quay lại trạng thái cũ
                selectElement.value = oldStatus;
            }
        }


        // --- Charting Functions (using Chart.js) ---
        async function fetchAndRenderCharts() {
            const API_CHARTS_URL = '/admin/orders/charts'; 
            const yearForSales = chartYearSelect.value;
            salesYearSpan.textContent = yearForSales;

            // Fetch Monthly Sales
            try {
                const salesResponse = await fetch(`${API_CHARTS_URL}/monthly-sales?year=${yearForSales}`);
                if (!salesResponse.ok) throw new Error('Failed to fetch monthly sales');
                const salesData = await salesResponse.json();
                renderMonthlySalesChart(salesData, yearForSales);
            } catch (error) {
                console.error('Lỗi khi tải dữ liệu doanh thu hàng tháng:', error);
            }

            // Fetch Status Distribution (THÊM BỘ LỌC THÁNG/NĂM)
            try {
                const statusChartMonth = chartStatusMonthSelect.value; // Lấy giá trị tháng từ dropdown
                const statusChartYear = chartStatusYearSelect.value;     // Lấy giá trị năm từ dropdown

                const statusResponse = await fetch(`${API_CHARTS_URL}/status-distribution?month=${statusChartMonth}&year=${statusChartYear}`);
                if (!statusResponse.ok) throw new Error('Failed to fetch status distribution');
                const statusData = await statusResponse.json();
                renderStatusDistributionChart(statusData);
            } catch (error) {
                console.error('Lỗi khi tải dữ liệu phân bổ trạng thái:', error);
            }
        }

        function renderMonthlySalesChart(data, year) {
            if (!monthlySalesChartCanvas) { // Kiểm tra lần nữa để đảm bảo tồn tại
                console.error('monthlySalesChartCanvas không được tìm thấy.');
                return;
            }
            if (monthlySalesChartInstance) {
                monthlySalesChartInstance.destroy();
            }
            const ctx = monthlySalesChartCanvas.getContext('2d');
            monthlySalesChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12'],
                    datasets: [{
                        label: `Tổng doanh thu (${year})`,
                        data: data,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Tổng tiền (VND)'
                            },
                             // Định dạng tooltip hiển thị tiền tệ
                            ticks: {
                                callback: function(value, index, ticks) {
                                    return value.toLocaleString('vi-VN') + ' VND';
                                }
                            }
                        }
                    },
                    tooltips: { // Cấu hình tooltip cho Chart.js v2 (nếu đang dùng)
                        callbacks: {
                            label: function(tooltipItem, data) {
                                let label = data.datasets[tooltipItem.datasetIndex].label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += tooltipItem.yLabel.toLocaleString('vi-VN') + ' VND';
                                return label;
                            }
                        }
                    }
                }
            });
        }

        function renderStatusDistributionChart(data) {
            if (!statusDistributionChartCanvas) { // Kiểm tra lần nữa để đảm bảo tồn tại
                console.error('statusDistributionChartCanvas không được tìm thấy.');
                return;
            }
            if (statusDistributionChartInstance) {
                statusDistributionChartInstance.destroy();
            }

            const labels = data.map(d => {
                switch (d._id) {
                    case 'pending': return 'Đang chờ';
                    case 'preparing': return 'Đang chuẩn bị';
                    case 'done': return 'Hoàn thành';
                    case 'canceled': return 'Đã hủy';
                    default: return d._id;
                }
            });
            const counts = data.map(d => d.count);
            const backgroundColors = labels.map((_, index) => {
                const originalStatus = data[index]._id; // Get original status to map color
                switch (originalStatus) {
                    case 'pending': return '#FFC107'; // Yellow
                    case 'preparing': return '#2196F3'; // Blue
                    case 'done': return '#4CAF50';    // Green
                    case 'canceled': return '#F44336';   // Red
                    default: return '#9E9E9E'; // Grey
                }
            });

            const ctx = statusDistributionChartCanvas.getContext('2d');
            statusDistributionChartInstance = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: counts,
                        backgroundColor: backgroundColors,
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: false
                        }
                    }
                }
            });
        }

        // Initial load
        document.addEventListener('DOMContentLoaded', () => {
            fetchOrders(); 
            fetchAndRenderCharts(); 
            // Thêm listeners cho dropdown trạng thái sau khi trang tải lần đầu
            addStatusSelectEventListeners(); 
        });

    </script>
</body>
</html>