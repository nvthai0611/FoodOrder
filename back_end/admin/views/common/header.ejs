<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Base Navbar Styles */
        .navbar-nav .nav-link.active {
            background-color: rgba(255, 255, 255, 0.1);
            color: #fff;
            border-radius: 5px;
        }
        .navbar-nav .nav-link:not(.active):hover {
            background-color: rgba(255, 255, 255, 0.05);
            color: rgba(255, 255, 255, 0.75);
        }

        /* --- Notification Dropdown & Items Styling --- */
        .notification-badge {
            position: absolute;
            top: 0px;
            right: -8px;
            background-color: #dc3545;
            color: white;
            border-radius: 50%;
            padding: 4px 8px;
            font-size: 0.7em;
            line-height: 1;
            min-width: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            animation: pulse-ring 1.5s infinite ease-in-out;
        }
        @keyframes pulse-ring {
            0% { transform: scale(0.8); opacity: 0.7; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(0.8); opacity: 0.7; }
        }
        .notification-dropdown {
            min-width: 350px;
            max-height: 450px;
            overflow-y: auto;
            border-radius: 8px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.15);
            border: none;
            padding: 0;
            background-color: #ffffff;
            display: none;
            position: absolute;
            z-index: 1000;
            float: left;
            min-width: 10rem;
            padding: 0.5rem 0;
            margin: 0;
            font-size: 1rem;
            color: #212529;
            text-align: left;
            list-style: none;
            background-clip: padding-box;
            border: 1px solid rgba(0,0,0,.15);
            border-radius: 0.375rem;
        }
        .notification-dropdown .dropdown-header {
            padding: 15px 20px;
            font-size: 1.25rem;
            font-weight: bold;
            color: #343a40;
            border-bottom: 1px solid #eee;
            background: linear-gradient(to right, #f8f9fa, #e9ecef);
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }
        .notification-dropdown .dropdown-item {
            padding: 12px 20px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s, transform 0.1s;
            white-space: normal;
        }
        .notification-dropdown .notification-item:last-of-type { border-bottom: none; }
        .notification-dropdown .dropdown-item:hover {
            background-color: #f5f5f5;
            transform: translateX(3px);
        }
        .notification-item.unread {
            background: linear-gradient(to right, #eaf6ff, #dcf0ff);
            font-weight: 500;
            color: #0056b3;
            border-left: 4px solid #007bff;
        }
        .notification-item.unread:hover { background: linear-gradient(to right, #d4ebff, #c2e0ff); }
        .notification-item .noti-title { font-size: 1rem; color: #343a40; margin-bottom: 5px; }
        .notification-item .noti-message { font-size: 0.875rem; color: #6c757d; line-height: 1.4; }
        .notification-item .noti-timestamp {
            font-size: 0.75rem;
            color: #99aab5;
            margin-top: 8px;
            display: block;
            text-align: right;
        }
        .notification-dropdown .no-notifications-message {
            padding: 20px;
            text-align: center;
            font-style: italic;
            color: #999;
            cursor: default;
        }
        .notification-dropdown #clearNotificationsInner {
            color: #dc3545;
            font-weight: bold;
            background-color: #fff;
            border-top: 1px solid #eee;
            padding: 15px 20px;
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px;
        }
        .notification-dropdown #clearNotificationsInner:hover {
            background-color: #f8d7da;
            color: #a71d2a;
        }
        .notification-dropdown.show {
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            transform: none !important;
            pointer-events: auto !important;
            z-index: 1050 !important;
        }
        .dropdown-toggle { pointer-events: auto !important; }
    </style>
</head>
<body>

<nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
    <div class="container">
        <a class="navbar-brand" href="/admin">Admin Panel</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/admin">User Management</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/admin/product">Product Management</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/admin/orders">Orders Management</a>
                </li>
                <li class="nav-item dropdown">
                    <button type="button" class="nav-link dropdown-toggle" id="navbarDropdownNotifications" role="button" data-bs-toggle="dropdown" aria-expanded="false">
  Notifications <span class="badge bg-danger rounded-pill notification-badge d-none" id="notificationCount">0</span>
</button>
                    <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="navbarDropdownNotifications" id="notificationList">
                        </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container">
    <h1>Welcome to the Admin Panel!</h1>
    <p>Real-time notifications will appear in the "Notifications" dropdown.</p>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // --- Existing Navbar Active Link Logic (keep as is) ---
        const navLinks = document.querySelectorAll('.navbar-nav .nav-link');
        const adminPanelBrand = document.querySelector('.navbar-brand[href="/admin"]');
        function setActiveLink(href) {
            navLinks.forEach(nav => nav.classList.remove('active'));
            const targetLink = document.querySelector(`.navbar-nav .nav-link[href="${href}"]`);
            if (targetLink) {
                targetLink.classList.add('active');
                localStorage.setItem('activeLink', href);
            }
        }
        navLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                setActiveLink(this.getAttribute('href'));
            });
        });
        if (adminPanelBrand) {
            adminPanelBrand.addEventListener('click', function(event) {
                setActiveLink('/admin');
            });
        }
        const storedActiveLink = localStorage.getItem('activeLink');
        const currentPath = window.location.pathname;
        if (storedActiveLink) {
            setActiveLink(storedActiveLink);
        } else if (currentPath === '/admin' || currentPath === '/admin/') {
            setActiveLink('/admin');
        }

        // --- Socket.IO Notifications for Admin Panel ---
        const socket = io();
        const notificationList = document.getElementById('notificationList');
        const notificationCountSpan = document.getElementById('notificationCount');
        
        let notifications = JSON.parse(localStorage.getItem('adminNotifications')) || [];
        renderNotifications();

        socket.on("connect", () => {
            console.log("Admin EJS socket connected:", socket.id);
        });

        // L·∫Øng nghe s·ª± ki·ªán "admin_new_order" t·ª´ server
        socket.on("admin_new_order", (orderData) => {
            console.log("üéâ Admin EJS nh·∫≠n ƒë∆°n h√†ng m·ªõi:", orderData);
            const newNotification = {
                id: orderData.orderCode || `noti-${Date.now()}`,
                title: `üõçÔ∏è ƒê∆°n h√†ng m·ªõi t·ª´: ${orderData.userName}`,
                message: `üßæ M√£ ƒë∆°n: ${orderData.orderCode}, üí∞ T·ªïng: ${orderData.totalPrice?.toLocaleString('vi-VN')}‚Ç´`,
                timestamp: new Date().toISOString(),
                read: false,
                orderData: orderData
            };
            
            notifications.unshift(newNotification);
            saveNotifications();
            renderNotifications();
        });

        function saveNotifications() {
            localStorage.setItem('adminNotifications', JSON.stringify(notifications));
        }

        function markAsRead(index) {
            if (notifications[index] && !notifications[index].read) {
                notifications[index].read = true;
                saveNotifications();
                renderNotifications();
            }
        }

        function clearAllNotifications() {
            notifications = [];
            saveNotifications();
            renderNotifications();
        }

        function renderNotifications() {
            notificationList.innerHTML = '';
            const headerItem = document.createElement('li');
            headerItem.innerHTML = '<h6 class="dropdown-header">üîî Th√¥ng b√°o c·ªßa Admin</h6>';
            notificationList.appendChild(headerItem);
            
            if (notifications.length === 0) {
                const noNotiItem = document.createElement('li');
                noNotiItem.classList.add('no-notifications-message', 'text-center', 'text-muted');
                noNotiItem.textContent = 'Kh√¥ng c√≥ th√¥ng b√°o n√†o.';
                notificationList.appendChild(noNotiItem);
            } else {
                notifications.forEach((noti, index) => {
                    const listItem = document.createElement('li');
                    listItem.classList.add('dropdown-item', 'notification-item');
                    if (!noti.read) {
                        listItem.classList.add('unread');
                    }
                    listItem.setAttribute('data-index', index);
                    const time = new Date(noti.timestamp).toLocaleString('vi-VN', {
                        hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric'
                    });
                    listItem.innerHTML = `
                        <div class="noti-title">${noti.title}</div>
                        <div class="noti-message">${noti.message}</div>
                        <div class="noti-timestamp">${time}</div>
                    `;
                    notificationList.appendChild(listItem);
                    listItem.addEventListener('click', function() {
                        markAsRead(index);
                    });
                });
            }
            if (notifications.length > 0) {
                const dividerItem = document.createElement('li');
                dividerItem.innerHTML = '<hr class="dropdown-divider">';
                notificationList.appendChild(dividerItem);
                const clearAllItem = document.createElement('li');
                clearAllItem.innerHTML = '<a class="dropdown-item text-center text-danger" href="#" id="clearNotificationsInner">üóëÔ∏è X√≥a t·∫•t c·∫£ th√¥ng b√°o</a>';
                notificationList.appendChild(clearAllItem);
                document.getElementById('clearNotificationsInner').addEventListener('click', function(e) {
                    e.preventDefault();
                    clearAllNotifications();
                });
            }
            updateNotificationCount();
        }

        function updateNotificationCount() {
            const unreadCount = notifications.filter(noti => !noti.read).length;
            notificationCountSpan.textContent = unreadCount;
            if (unreadCount > 0) {
                notificationCountSpan.classList.remove('d-none');
            } else {
                notificationCountSpan.classList.add('d-none');
            }
        }
    });
</script>
</body>
</html>